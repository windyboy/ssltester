/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.14/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

// Read version from Version.kt file
val versionFile = file("src/main/kotlin/org/example/Version.kt")
val versionRegex = Regex("""const val VERSION = "([^"]+)"""")
val versionMatch = versionFile.readText().let { versionRegex.find(it) }
val projectVersion = versionMatch?.groupValues?.get(1) ?: "0.0.2"

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
    id("org.jetbrains.kotlin.jvm") version "1.9.22"
    // shadow - update to new plugin ID and latest stable version
    id("com.gradleup.shadow") version "8.3.6"
    // Add ktlint plugin for code formatting
    id("org.jlleitschuh.gradle.ktlint") version "12.1.0"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

// Version catalog for dependencies
val versions =
    mapOf(
        "kotlin" to "1.9.22",
        "slf4j" to "2.0.11",
        "logback" to "1.5.13",
        "jackson" to "2.16.1",
        "kotlin-logging" to "3.0.5",
    )

dependencies {
    // Dependency Injection
    // Picocli for command line argument parsing
    implementation("info.picocli:picocli:4.7.5")

    // JSON and YAML support
    implementation("com.fasterxml.jackson.core:jackson-databind:${versions["jackson"]}")
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${versions["jackson"]}")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:${versions["jackson"]}")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${versions["jackson"]}")

    // Logging
    implementation("org.slf4j:slf4j-api:${versions["slf4j"]}")
    implementation("io.github.microutils:kotlin-logging:${versions["kotlin-logging"]}")
    implementation("ch.qos.logback:logback-classic:${versions["logback"]}")

    // Kotlin dependencies
    implementation(platform("org.jetbrains.kotlin:kotlin-bom:${versions["kotlin"]}"))
    implementation("org.jetbrains.kotlin:kotlin-stdlib")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.7.3")

    // Testing
    testImplementation("org.jetbrains.kotlin:kotlin-test")
    testImplementation("org.junit.jupiter:junit-jupiter:5.10.2")
    testImplementation("org.junit.platform:junit-platform-launcher:1.10.2")
    testImplementation("io.mockk:mockk:1.13.9")
    testImplementation("net.bytebuddy:byte-buddy:1.14.12")
    testImplementation("net.bytebuddy:byte-buddy-agent:1.14.12")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.10.2")
}

// Java configuration
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

// Kotlin configuration
tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile> {
    kotlinOptions {
        jvmTarget = "21"
        apiVersion = "1.9"
        languageVersion = "1.9"
        freeCompilerArgs =
            listOf(
                "-Xjsr305=strict",
                "-Xjvm-default=all",
            )
    }
}

// Java compilation configuration
tasks.withType<JavaCompile> {
    options.compilerArgs.addAll(listOf("--enable-preview"))
}

// Application configuration
application {
    mainClass.set("org.example.SSLTestKt")
    applicationName = "ssl-test"
}

// Run task configuration
tasks.named<JavaExec>("run") {
    standardInput = System.`in`
    jvmArgs("--enable-preview")
}

// Testing configuration
tasks.test {
    useJUnitPlatform()
    jvmArgs(
        listOf(
            "-javaagent:${classpath.find { it.name.contains("byte-buddy-agent") }?.absolutePath}",
            "-XX:+IgnoreUnrecognizedVMOptions",
            "--add-opens=java.base/sun.nio.ch=ALL-UNNAMED",
            "--add-opens=java.base/java.io=ALL-UNNAMED",
            "--add-opens=java.base/java.lang=ALL-UNNAMED",
            "--add-opens=java.base/java.util=ALL-UNNAMED",
            "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
            "-Xlog:gc*:file=gc.log",
            "-XX:+PrintCommandLineFlags",
            "-Dsun.io.useCanonCaches=false",
            "-XX:+IgnoreUnrecognizedVMOptions",
            "-Dsun.misc.Unsafe.objectFieldOffset=ignore",
        ),
    )
    testLogging {
        events("passed", "skipped", "failed")
        showStandardStreams = true
    }

    // Add test execution time listener
    systemProperty("junit.platform.listener.default.class", "org.example.listener.TestExecutionTimeListener")
}

tasks.shadowJar {
    archiveBaseName.set("ssl-test")
    archiveClassifier.set("")
    archiveVersion.set(projectVersion)
    mergeServiceFiles()
}

// Configure Kotlin daemon
kotlin {
    jvmToolchain(21)
    sourceSets.all {
        languageSettings {
            languageVersion = "1.9"
            apiVersion = "1.9"
        }
    }
}

// Configure all Java processes
allprojects {
    tasks.withType<JavaExec> {
        jvmArgs(
            listOf(
                "-XX:+IgnoreUnrecognizedVMOptions",
                "--add-opens=java.base/sun.nio.ch=ALL-UNNAMED",
                "--add-opens=java.base/java.io=ALL-UNNAMED",
                "-Dsun.io.useCanonCaches=false",
                "-XX:+IgnoreUnrecognizedVMOptions",
                "-Dsun.misc.Unsafe.objectFieldOffset=ignore",
            ),
        )
    }
}

// Configure Gradle daemon
gradle.projectsEvaluated {
    tasks.withType<JavaCompile> {
        options.compilerArgs.addAll(
            listOf(
                "--enable-preview",
                "-Xlint:-options",
            ),
        )
    }
}
