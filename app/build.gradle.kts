/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.14/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
    id("com.gradleup.shadow") version "8.3.4"
    //kotlin
    id("org.jetbrains.kotlin.jvm") version "1.9.22"
    id("org.jetbrains.kotlin.plugin.serialization") version "1.9.22"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

// Version catalog for dependencies
val versions = mapOf(
    "kotlin" to "1.9.22",
    "coroutines" to "1.7.3",
    "slf4j" to "2.0.11",
    "logback" to "1.5.13",
    "bouncycastle" to "1.78",
    "mockk" to "1.13.9",
    "jackson" to "2.16.1"
)

dependencies {
    // Picocli for command line argument parsing
    implementation(libs.picocli)
    annotationProcessor(libs.picocli.codegen)
    
    // JSON support
    implementation(libs.jackson.databind)
    implementation(libs.jackson.dataformat.yaml)
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:${versions["jackson"]}")
    
    // Logging
    implementation("org.slf4j:slf4j-api:${versions["slf4j"]}")
    implementation("ch.qos.logback:logback-classic:${versions["logback"]}")

    // Kotlin dependencies
    implementation("org.jetbrains.kotlin:kotlin-stdlib")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions["coroutines"]}")

    // BouncyCastle for OCSP and CRL support
    implementation("org.bouncycastle:bcprov-jdk18on:${versions["bouncycastle"]}")
    implementation("org.bouncycastle:bcpkix-jdk18on:${versions["bouncycastle"]}")

    // Testing
    testImplementation("org.jetbrains.kotlin:kotlin-test")
    testImplementation("io.mockk:mockk:${versions["mockk"]}")
    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions["coroutines"]}")
    testImplementation("org.bouncycastle:bcprov-jdk18on:${versions["bouncycastle"]}")
    testImplementation("org.bouncycastle:bcpkix-jdk18on:${versions["bouncycastle"]}")
    testImplementation("org.junit.jupiter:junit-jupiter:5.10.2")
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.10.2")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.10.2")
}

// Java configuration
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

// Kotlin configuration
tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile> {
    kotlinOptions {
        jvmTarget = "21"
        freeCompilerArgs = listOf("-Xjsr305=strict")
    }
}

// Java compilation configuration
tasks.withType<JavaCompile> {
    options.compilerArgs.addAll(listOf("--enable-preview"))
}

// Application configuration
application {
    mainClass.set("org.example.SSLTest")
}

// Run task configuration
tasks.named<JavaExec>("run") {
    standardInput = System.`in`
    jvmArgs("--enable-preview")
}

// Testing configuration
tasks.test {
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
        showStandardStreams = true
    }
}
