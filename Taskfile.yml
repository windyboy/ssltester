version: '3'
vars:
  VERSION: '{{.VERSION | default "0.0.2"}}'
  RELEASE_NAME: 'Release v{{.VERSION}}'
  PROJECT_NAME: 'ssl-test'
  HOST: '{{.HOST | default "example.com"}}'
  PORT: '{{.PORT | default "443"}}'
  TIMEOUT: '{{.TIMEOUT | default "5000"}}'
  FORMAT: '{{.FORMAT | default "TXT"}}'
  OUTPUT: '{{.OUTPUT | default ""}}'
  JAVA_VERSION: '21'
  KOTLIN_VERSION: '2.1.21'

tasks:
  get-version:
    desc: Get version from Version.kt file
    internal: true
    silent: true
    cmds:
      - grep "const val VERSION" app/src/main/kotlin/org/example/Version.kt | sed "s/.*\"\\(.*\\)\".*/\\1/"

  validate-version:
    desc: Validate version format (semver)
    internal: true
    silent: true
    cmds:
      - |
        if ! echo "{{.VERSION}}" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$' >/dev/null; then
          echo "‚ùå Error: Invalid version format. Must follow semver (e.g., 1.0.0, 1.0.0-alpha.1)"
          exit 1
        fi
        echo "‚úÖ Version {{.VERSION}} is valid"

  clean:
    desc: Clean the project build files
    cmds:
      - echo "üßπ Cleaning project..."
      - ./gradlew clean
      - echo "‚úÖ Clean completed"

  compile:
    desc: Compile the project
    deps: [validate-version]
    cmds:
      - echo "üî® Compiling project..."
      - ./gradlew compileKotlin
      - echo "‚úÖ Compilation completed"

  lint:
    desc: Run code linting with ktlint
    cmds:
      - echo "üîç Running code linting..."
      - ./gradlew ktlintCheck || (echo "‚ö†Ô∏è Linting issues found. Run 'task format' to fix them." && exit 1)
      - echo "‚úÖ Linting passed"

  format:
    desc: Format code with ktlint
    cmds:
      - echo "üé® Formatting code..."
      - ./gradlew ktlintFormat
      - echo "‚úÖ Code formatting completed"

  test:unit:
    desc: Run unit tests
    cmds:
      - echo "üß™ Running unit tests..."
      - ./gradlew test --tests "org.example.*Test"
      - echo "‚úÖ Unit tests completed"

  test:int:
    desc: Run integration tests
    cmds:
      - echo "üîó Running integration tests..."
      - ./gradlew test --tests "org.example.*IT" || (echo "‚ö†Ô∏è Integration tests failed or not found" && exit 0)
      - echo "‚úÖ Integration tests completed"

  test:
    desc: Run all tests
    deps: [test:unit, test:int]

  test:coverage:
    desc: Run tests with coverage report
    cmds:
      - echo "üìä Running tests with coverage..."
      - ./gradlew test jacocoTestReport
      - echo "üìà Coverage report generated in app/build/reports/jacoco/test/html/index.html"

  build:
    desc: Build the release artifacts
    deps: [validate-version, clean, test]
    cmds:
      - echo "üèóÔ∏è Building project..."
      - ./gradlew build
      - echo "‚úÖ Build completed"

  build:fat-jar:
    desc: Build fat JAR with all dependencies
    deps: [validate-version, clean, test]
    cmds:
      - echo "üì¶ Building fat JAR..."
      - ./gradlew shadowJar
      - |
        echo "‚úÖ Fat JAR created: app/build/libs/{{.PROJECT_NAME}}-{{.VERSION}}-all.jar"

  run:
    desc: Run the application locally
    cmds:
      - echo "üöÄ Running application..."
      - |
        ./gradlew run --args="{{.HOST}} --port {{.PORT}} --connect-timeout {{.TIMEOUT}} --format {{.FORMAT}}{{if .OUTPUT}} --output {{.OUTPUT}}{{end}}"

  run:debug:
    desc: Run the application with debug logging
    cmds:
      - echo "üêõ Running application with debug logging..."
      - |
        ./gradlew run --args="{{.HOST}} --port {{.PORT}} --connect-timeout {{.TIMEOUT}} --format {{.FORMAT}}{{if .OUTPUT}} --output {{.OUTPUT}}{{end}}" \
          -Dorg.slf4j.simpleLogger.defaultLogLevel=debug

  changelog:
    desc: Generate changelog from git commits
    cmds:
      - echo "üìù Generating changelog..."
      - |
        PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD")
        echo "## [{{.VERSION}}] - $(date +%Y-%m-%d)" > CHANGELOG.md.tmp
        echo "" >> CHANGELOG.md.tmp
        git log $PREV_TAG..HEAD --pretty=format:"* %s" --no-merges >> CHANGELOG.md.tmp
        echo "" >> CHANGELOG.md.tmp
        echo "" >> CHANGELOG.md.tmp
        if [ -f CHANGELOG.md ]; then
          cat CHANGELOG.md >> CHANGELOG.md.tmp
        fi
        mv CHANGELOG.md.tmp CHANGELOG.md
      - echo "‚úÖ Changelog generated"

  docs:generate:
    desc: Generate project documentation
    cmds:
      - echo "üìö Generating documentation..."
      - ./gradlew dokkaHtml
      - echo "‚úÖ Documentation generated in app/build/dokka/html/"

  github-release:
    desc: Create GitHub release with artifacts
    deps: [validate-version, build:fat-jar, changelog]
    cmds:
      - |
        echo "üîê Checking GitHub CLI authentication..."
        if ! gh auth status >/dev/null 2>&1; then
          echo "‚ùå Error: GitHub CLI not authenticated. Please run 'gh auth login' first"
          exit 1
        fi
      - |
        echo "üîç Verifying git repository..."
        if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
          echo "‚ùå Error: Not a git repository. Please initialize git first."
          exit 1
        fi
        REMOTE_URL=$(git remote get-url origin 2>/dev/null || echo "")
        if [ -z "$REMOTE_URL" ]; then
          echo "‚ùå Error: No git remote 'origin' found. Please add a remote first."
          exit 1
        fi
        echo "‚úÖ Repository URL: $REMOTE_URL"
      - |
        echo "üè∑Ô∏è Creating git tag v{{.VERSION}}..."
        git tag -a "v{{.VERSION}}" -m "{{.RELEASE_NAME}}"
        git push origin "v{{.VERSION}}"
      - |
        echo "üì¶ Creating GitHub release..."
        CHANGELOG=$(awk '/^## \[{{.VERSION}}\]/{p=1;print;next} /^## /{p=0} p' CHANGELOG.md)
        gh release create "v{{.VERSION}}" \
          --title "{{.RELEASE_NAME}}" \
          --notes "$CHANGELOG" \
          ./app/build/libs/{{.PROJECT_NAME}}-{{.VERSION}}*.jar
      - |
        echo "‚úÖ GitHub release created: v{{.VERSION}}"

  check:
    desc: Run all quality checks (lint, test, build)
    deps: [lint, test, build]
    cmds:
      - echo "‚úÖ All quality checks passed"

  security:scan:
    desc: Run security vulnerability scan
    cmds:
      - echo "üîí Running security scan..."
      - ./gradlew dependencyCheckAnalyze || echo "‚ö†Ô∏è Dependency check not configured"
      - echo "‚úÖ Security scan completed"

  dependencies:update:
    desc: Check for dependency updates
    cmds:
      - echo "üì¶ Checking for dependency updates..."
      - ./gradlew dependencyUpdates || echo "‚ö†Ô∏è Dependency updates plugin not configured"
      - echo "‚úÖ Dependency check completed"

  dependencies:report:
    desc: Generate dependency report
    cmds:
      - echo "üìä Generating dependency report..."
      - ./gradlew dependencies --configuration runtimeClasspath
      - echo "‚úÖ Dependency report generated"

  dev:
    desc: Development workflow (clean, compile, test)
    deps: [clean, compile, test]
    cmds:
      - echo "‚úÖ Development workflow completed"

  ci:
    desc: Continuous integration workflow
    deps: [check, test:coverage, security:scan]
    cmds:
      - echo "‚úÖ CI workflow completed"

  release:
    desc: Complete release workflow
    deps: [ci, build:fat-jar, github-release]
    cmds:
      - echo "üéâ Release v{{.VERSION}} completed successfully!"

  help:
    desc: Show detailed help message
    cmds:
      - |
          echo "üöÄ SSL Test Tool - Task Runner"
          echo "================================"
          echo ""
          echo "üìã Available Tasks:"
          echo "  Development:"
          echo "    task clean              - Clean build files"
          echo "    task compile            - Compile project"
          echo "    task lint               - Run code linting"
          echo "    task format             - Format code"
          echo "    task dev                - Development workflow"
          echo ""
          echo "  Testing:"
          echo "    task test               - Run all tests"
          echo "    task test:unit          - Run unit tests only"
          echo "    task test:int           - Run integration tests only"
          echo "    task test:coverage      - Run tests with coverage"
          echo ""
          echo "  Building:"
          echo "    task build              - Build project"
          echo "    task build:fat-jar      - Build fat JAR"
          echo "    task check              - Run all quality checks"
          echo ""
          echo "  Release:"
          echo "    task changelog          - Generate changelog"
          echo "    task github-release     - Create GitHub release"
          echo "    task release            - Complete release workflow"
          echo ""
          echo "  Application:"
          echo "    task run                - Run application"
          echo "    task run:debug          - Run with debug logging"
          echo ""
          echo "  Quality:"
          echo "    task ci                 - CI workflow"
          echo "    task security:scan      - Security vulnerability scan"
          echo "    task dependencies:update - Check for updates"
          echo ""
          echo "üìù Usage Examples:"
          echo "  task run HOST=github.com PORT=443 FORMAT=JSON"
          echo "  task release VERSION=1.0.0"
          echo ""
          echo "‚öôÔ∏è Configuration:"
          echo "  VERSION=<version>         - Version number (semver)"
          echo "  HOST=<host>               - Target host (default: example.com)"
          echo "  PORT=<port>               - Target port (default: 443)"
          echo "  TIMEOUT=<ms>              - Connection timeout (default: 5000)"
          echo "  FORMAT=<format>           - Output format (default: TXT)"
          echo "  OUTPUT=<file>             - Output file path (optional)"
          echo ""
          echo "üîß Requirements:"
          echo "  - Java {{.JAVA_VERSION}} or higher"
          echo "  - Gradle 8.x or higher"
          echo "  - GitHub CLI (for release tasks)"
          echo ""
          echo "üìñ For more information: https://taskfile.dev"

  version:
    desc: Show current version
    cmds:
      - |
        echo "Current version: {{.VERSION}}"
        echo "Project: {{.PROJECT_NAME}}"
        echo "Kotlin: {{.KOTLIN_VERSION}}"
        echo "Java: {{.JAVA_VERSION}}"

  default:
    desc: Show help message
    deps: [help]
