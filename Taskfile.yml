version: '3'

# ───────────────────────────────
# Global variables (string-substituted everywhere)
# ───────────────────────────────
vars:
  VERSION:        '{{ .VERSION   | default "0.0.2" }}'
  PROJECT_NAME:   'ssl-test'
  HOST:           '{{ .HOST      | default "example.com" }}'
  PORT:           '{{ .PORT      | default "443" }}'
  TIMEOUT:        '{{ .TIMEOUT   | default "5000" }}'
  FORMAT:         '{{ .FORMAT    | default "TXT" }}'
  OUTPUT:         '{{ .OUTPUT    | default "" }}'
  JAVA_VERSION:   '21'
  KOTLIN_VERSION: '2.1.21'
  GRADLEW:        './gradlew'          # one place to edit if you move/rename the wrapper

# ───────────────────────────────
# Environment variables exported into every cmd
# ───────────────────────────────
env:
  GRADLE_OPTS: '-Dorg.gradle.jvmargs=-Xmx2G'

# ───────────────────────────────
# Tasks
# ───────────────────────────────
tasks:

  # --- Bootstrap / Setup ------------------------------------
  bootstrap:
    desc: Check and install required tools
    cmds:
      - echo '🔧 Checking environment…'
      - command -v java      >/dev/null 2>&1 || (echo '❌ Java not found!'          && exit 1)
      - command -v "{{.GRADLEW}}" >/dev/null 2>&1 || (echo '❌ Gradle wrapper missing' && exit 1)
      - echo '✅ Environment ready'

  validate-version:
    desc: Validate version format (semver)
    internal: true
    silent: true
    cmds:
      - echo '{{.VERSION}}' | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$' || (echo '❌ Invalid version format' && exit 1)
      - echo "✅ Version {{.VERSION}} is valid"

  # --- Clean / Build ----------------------------------------
  clean:
    desc: Clean the project build files
    cmds:
      - echo '🧹 Cleaning project…'
      - "{{.GRADLEW}} clean"
      - echo '✅ Clean completed'

  compile:
    desc: Compile the project
    deps: [validate-version]
    cmds:
      - echo '🔨 Compiling project…'
      - "{{.GRADLEW}} compileKotlin"
      - echo '✅ Compilation completed'

  build:
    desc: Build the release artifacts
    deps: [validate-version, clean]
    cmds:
      - echo '🏗️  Building project…'
      - "{{.GRADLEW}} build --continue"
      - echo '✅ Build completed'

  "build:fat-jar":
    desc: Build fat JAR with all dependencies
    deps: [validate-version, clean]
    cmds:
      - echo '📦 Building fat JAR…'
      - "{{.GRADLEW}} shadowJar --continue"
      - echo '✅ Fat JAR created successfully'

  # --- Lint / Format ----------------------------------------
  lint:
    desc: Run code linting with ktlint
    cmds:
      - echo '🔍 Running code linting…'
      - "{{.GRADLEW}} ktlintCheck"
      - echo '✅ Linting passed'

  format:
    desc: Format code with ktlint
    cmds:
      - echo '🎨 Formatting code…'
      - "{{.GRADLEW}} ktlintFormat"
      - echo '✅ Code formatting completed'

  # --- Testing ----------------------------------------------
  "test:unit":
    desc: Run unit tests
    cmds:
      - echo '🧪 Running unit tests…'
      - "{{.GRADLEW}} test --tests 'org.example.*Test' --continue"
      - echo '✅ Unit tests completed'

  "test:int":
    desc: Run integration tests
    cmds:
      - echo '🔗 Running integration tests…'
      - |
        if find app/src/test -name "*IT.kt" -o -name "*IT.java" | grep -q .; then
          {{.GRADLEW}} test --tests 'org.example.*IT' --continue
        else
          echo 'ℹ️  No integration tests found (files ending with IT)'
        fi
      - echo '✅ Integration tests completed'

  "test:cli":
    desc: Test CLI functionality
    cmds:
      - echo '🧪 Testing CLI functionality…'
      - "{{.GRADLEW}} run --args='--help' >/dev/null 2>&1 && echo '✅ Help command works'"
      - "{{.GRADLEW}} run --args='--version' >/dev/null 2>&1 && echo '✅ Version command works'"
      - |
        {{.GRADLEW}} run --args='invalid-host-that-does-not-exist.com --port 443 --connect-timeout 1000' >/dev/null 2>&1 \
          && echo '✅ Invalid host handled gracefully' || echo '✅ Invalid host properly rejected'
      - echo '✅ CLI tests completed'

  test:
    desc: Run all tests
    deps: ["test:unit", "test:int", "test:cli"]

  "test:coverage":
    desc: Run tests with coverage report
    cmds:
      - echo '📊 Running tests with coverage…'
      - "{{.GRADLEW}} clean test jacocoTestReport --continue"
      - "echo '📈 Coverage report: app/build/reports/jacoco/test/html/index.html'"

  "coverage:show":
    desc: Show test coverage information and open reports
    cmds:
      - echo '📊 Test Coverage Information'
      - "{{.GRADLEW}} showCoverage"
      - "echo '📁 HTML report location: app/build/reports/jacoco/test/html/index.html'"

  "coverage:check":
    desc: Check if test coverage meets minimum thresholds
    cmds:
      - echo '🔍 Checking coverage thresholds…'
      - "{{.GRADLEW}} checkCoverage --continue"
      - echo '✅ Coverage verification completed'

  # --- Pre-commit -------------------------------------------
  pre-commit:
    desc: Run checks before commit
    deps: [lint, format, "test:unit"]

  # --- Changelog / Docs / Release ---------------------------
  changelog:
    desc: Generate changelog from git commits
    cmds:
      - echo '📝 Generating changelog…'
      - |
        PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo HEAD)
        {
          echo "## [{{.VERSION}}] - $(date +%F)"
          git log "$PREV_TAG"..HEAD --pretty=format:'* %s' --no-merges
          [ -f CHANGELOG.md ] && cat CHANGELOG.md
        } > CHANGELOG.md.tmp
      - mv CHANGELOG.md.tmp CHANGELOG.md
      - echo '✅ Changelog generated'

  "docs:generate":
    desc: Generate project documentation
    cmds:
      - echo '📚 Generating documentation…'
      - "{{.GRADLEW}} dokkaHtml"
      - "echo '✅ Documentation: app/build/dokka/html/'"

  github-release:
    desc: Create GitHub release with artifacts
    deps: [validate-version, "build:fat-jar", changelog]
    cmds:
      - echo '🔐 Checking GitHub CLI authentication…'
      - gh auth status || (echo '❌ GitHub CLI not authenticated' && exit 1)
      - echo '🔍 Verifying git repository…'
      - git rev-parse --is-inside-work-tree || (echo '❌ Not a git repository' && exit 1)
      - echo "🏷️  Creating git tag v{{.VERSION}}…"
      - git tag -a "v{{.VERSION}}" -m "Release v{{.VERSION}}"
      - git push origin "v{{.VERSION}}"
      - echo '📦 Creating GitHub release…'
      - gh release create "v{{.VERSION}}" --title "Release v{{.VERSION}}" ./app/build/libs/ssl-test-{{.VERSION}}*.jar
      - echo '✅ GitHub release created successfully'

  check:
    desc: Run all quality checks (lint, test, build)
    deps: [lint, test, build]

  "security:scan":
    desc: Run security vulnerability scan
    cmds:
      - echo '🔒 Running security scan…'
      - "{{.GRADLEW}} dependencyCheckAnalyze || echo '⚠️  dependency-check plugin not configured'"
      - echo '✅ Security scan completed'

  "dependencies:update":
    desc: Check for dependency updates
    cmds:
      - echo '📦 Checking for dependency updates…'
      - "{{.GRADLEW}} dependencyUpdates || echo '⚠️  Versions-plugin not configured'"
      - echo '✅ Dependency check completed'

  "dependencies:report":
    desc: Generate dependency report
    cmds:
      - echo '📊 Generating dependency report…'
      - "{{.GRADLEW}} dependencies --configuration runtimeClasspath"
      - echo '✅ Dependency report generated'

  dev:
    desc: Development workflow (clean, compile, test)
    deps: [clean, compile, test]

  ci:
    desc: Continuous integration workflow
    deps: [check, "test:coverage", "security:scan"]

  release:
    desc: Complete release workflow
    deps: [ci, "build:fat-jar", github-release]

  help:
    desc: Show help message
    cmds:
      - echo 'Run `task --list` to see all available tasks.'
      - echo 'See README.md for more details.'

  default:
    desc: Show help message (alias for help)
    deps: [help]
