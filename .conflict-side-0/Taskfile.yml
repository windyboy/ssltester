version: '3'

vars:
  VERSION: '{{.VERSION | default "0.1.0"}}'
  RELEASE_NAME: 'Release v{{.VERSION}}'
  PROJECT_NAME: 'ssltest'

tasks:
  help:
    desc: Show this help message
    cmds:
      - |
        echo "Available tasks:"
        echo "  task clean        - Clean the project build files"
        echo "  task compile      - Compile the project"
        echo "  task test         - Run all tests"
        echo "  task build        - Build the release artifacts"
        echo "  task github-release - Create a GitHub release"
        echo "  task all          - Run complete build and release process"
        echo ""
        echo "Usage examples:"
        echo "  task              - Show this help message"
        echo "  task all          - Run complete build and release process"
        echo "  task github-release VERSION=1.0.0  - Create release with specific version"
        echo ""
        echo "Setting version:"
        echo "  1. Command line: task github-release VERSION=1.0.0"
        echo "  2. Environment: export VERSION=1.0.0"
        echo "  3. Default: 0.1.0"
        echo ""
        echo "Requirements:"
        echo "  - GitHub CLI (gh) installed and authenticated"
        echo "  - Repository must be initialized with git and have a remote"
        echo ""
        echo "For more information, visit: https://taskfile.dev"

  clean:
    desc: Clean the project build files
    cmds:
      - ./gradlew :app:clean

  compile:
    desc: Compile the project
    cmds:
      - ./gradlew :app:compileJava

  test:
    desc: Run all tests
    cmds:
      - ./gradlew :app:test

  build:
    desc: Build the release artifacts
    cmds:
      - ./gradlew :app:build

  github-release:
    desc: Create GitHub release
    deps: [build]
    cmds:
      - |
        if ! gh auth status >/dev/null 2>&1; then
          echo "Error: GitHub CLI not authenticated. Please run 'gh auth login' first"
          exit 1
        fi
      - |
        # Verify git repository and remote
        if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
          echo "Error: Not a git repository. Please initialize git first."
          exit 1
        fi
        REMOTE_URL=$(git remote get-url origin 2>/dev/null || echo "")
        if [ -z "$REMOTE_URL" ]; then
          echo "Error: No git remote 'origin' found. Please add a remote first."
          exit 1
        fi
        echo "Repository URL: $REMOTE_URL"
      - |
        echo "Creating release v{{.VERSION}}..."
        # Rename the JAR files with meaningful names
        for jar in ./app/build/libs/*.jar; do
          if [[ $jar == *"-all.jar" ]]; then
            mv "$jar" "./app/build/libs/{{.PROJECT_NAME}}-{{.VERSION}}-all.jar"
          elif [[ $jar == *"-sources.jar" ]]; then
            mv "$jar" "./app/build/libs/{{.PROJECT_NAME}}-{{.VERSION}}-sources.jar"
          else
            mv "$jar" "./app/build/libs/{{.PROJECT_NAME}}-{{.VERSION}}.jar"
          fi
        done
      - |
        gh release create "v{{.VERSION}}" \
          --title "Release v{{.VERSION}}" \
          --notes "Release v{{.VERSION}}" \
          ./app/build/libs/{{.PROJECT_NAME}}-{{.VERSION}}*.jar

  # Complete build and release process
  all:
    desc: Run the complete build and release process
    deps: [clean, compile, test, build, github-release]
    cmds:
      - echo "Build and release process completed successfully!"

  # Default task shows help
  default:
    desc: Show help message
    deps: [help] 